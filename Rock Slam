-- Client --

local UIS = game:GetService("UserInputService")
local RPS = game:GetService("ReplicatedStorage")
local PYS = game:GetService("PhysicsService")
local TS = game:GetService("TweenService")
local Debris = game:GetService("Debris")

local Modules = RPS.Modules
local Remotes = RPS.Remotes
local Effects = RPS.Effects

local Main = Remotes.Main
local Replicate = Remotes.Replicate

local Character = script.Parent.Parent

local HumanoidRootPart = Character.HumanoidRootPart
local Humanoid = Character.Humanoid

local Counter = 0
local MaxForce = 5

local Animations = Character.Animations
local Sounds = Character.Sounds

local SlamSound = Sounds.Slam
local SmashAnimation = Humanoid.Animator:LoadAnimation(Animations.Smash)

local RockParts: {BasePart} = {}

local Amount = 28
local Radius = 10
local LifeTime = 2

local CC = workspace.CurrentCamera
local CameraShaker = require(Modules.CameraShaker)

local CamShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(ShakeCFrame)
	CC.CFrame = CC.CFrame * ShakeCFrame
end)

local function XZAxis(Angle: number, Counter: number)
	local x = math.cos(Angle) * Radius * Counter
	local z = math.sin(Angle) * Radius * Counter

	return x, z
end

local function SetCollision(Part: BasePart, Group: string)
	Part.CollisionGroup = Group
end

local RCP = RaycastParams.new()
RCP.FilterType = Enum.RaycastFilterType.Exclude
RCP:AddToFilter(Character, workspace.Debris)

local ClientDebounce = false

UIS.InputBegan:Connect(function(UserInput, GPE)
	if GPE then return end

	if UserInput.KeyCode == Enum.KeyCode.E then
		if ClientDebounce then return end
		ClientDebounce = true

		Humanoid.AutoRotate = false
		Humanoid.WalkSpeed = 0
		Humanoid.JumpHeight = 0

		SmashAnimation:Play()
		SmashAnimation:AdjustSpeed(0.01)

		local Charge = Effects.Charge:Clone()
		Charge.Parent = HumanoidRootPart

		repeat task.wait(0.025)
			Counter += 0.1
		until not UIS:IsKeyDown(Enum.KeyCode.E) or Counter >= MaxForce
		SmashAnimation:AdjustSpeed(1.25)
		Charge:Destroy()

		if Counter <= 1 then
			ClientDebounce = false

			Humanoid.AutoRotate = true
			Humanoid.WalkSpeed = 16
			Humanoid.JumpHeight = 7.2
			
			return
		end

		Replicate:FireServer({SkillType = "Smash", Force = Counter})
		print(Counter)
		Counter = 0

		task.wait(3)
		ClientDebounce = false
	end
end)

Replicate.OnClientEvent:Connect(function(Skill)
	if Skill.SkillType == "Smash" then
		local GroundAtt: Attachment = Effects.Ground.GroundAtt:Clone()

		task.spawn(function()
			for _ = 1,8 + Skill.Force do
				local FlyingRock = Effects.FlyingRock:Clone()
				FlyingRock.CanCollide = false
				FlyingRock.CFrame = HumanoidRootPart.CFrame * CFrame.new(0, 3, 0)
				FlyingRock.CFrame *= CFrame.Angles(0, math.rad(math.random(1, 6)), 0)
				FlyingRock.Size = Vector3.new(Random.new():NextNumber(1.5, 2), Random.new():NextNumber(1.5, 2), Random.new():NextNumber(1.5, 2))
				FlyingRock.Orientation = Vector3.new(math.random(-45, 45), 0, math.random(-45, 45))
				FlyingRock.BrickColor = workspace.Debris:WaitForChild("Rocks").BrickColor
				FlyingRock.Material = workspace.Debris.Rocks.Material

				FlyingRock.Parent = workspace.Debris

				local BV = Instance.new("BodyVelocity")
				BV.MaxForce = Vector3.new(1,1,1) * math.huge

				BV.Velocity = HumanoidRootPart.CFrame.UpVector * 40 + Vector3.new(math.random(-25, 25), 5, math.random(-25, 25)) * Skill.Force
				BV.Parent = FlyingRock

				task.delay(0.05, function()
					FlyingRock.CanCollide = true
				end)

				local Debounce: {boolean} = {}

				local Connection Connection = FlyingRock.Touched:Connect(function(Hit: Instance)
					if Hit:IsDescendantOf(workspace) and Hit.Parent ~= Character and Hit.Parent ~= workspace.Debris and Hit.Name == "Baseplate" then
						if Debounce[FlyingRock] ~= nil then return end
						Debounce[FlyingRock] = true
						FlyingRock.Dust:Emit(FlyingRock.Dust:GetAttribute("EmitCount") * Skill.Force)	
					end
				end)

				Debris:AddItem(BV, 0.1)
				Debris:AddItem(FlyingRock, 1.5)

				FlyingRock.Destroying:Once(function()
					table.clear(Debounce)
					Connection:Disconnect()
				end)	
			end
		end)

		CamShake:Start()
		CamShake:ShakeOnce(17.5, 15, 0.1, 0.75)
		
		SlamSound.Volume = 0 + Skill.Force / 3
		SlamSound:Play()

		local Shockwave_1, Shockwave_2 = Effects.Shockwave_1:Clone(), Effects.Shockwave_2:Clone()
		
		Shockwave_1.CFrame, Shockwave_2.CFrame = HumanoidRootPart.CFrame * CFrame.new(0, - 3, 0), HumanoidRootPart.CFrame * CFrame.new(0, - 3, 0)
		Shockwave_1.Parent, Shockwave_2.Parent = HumanoidRootPart, HumanoidRootPart

		TS:Create(Shockwave_1, TweenInfo.new(0.5), {Transparency = 1}):Play()
		TS:Create(Shockwave_2, TweenInfo.new(0.5), {Transparency = 1}):Play()
		
		task.delay(0.5, function()
			Shockwave_1:Destroy() Shockwave_2:Destroy()
		end)

		for x = 1, Amount do
			local Angle = x * (2 * math.pi / Amount)
			local X,Z = XZAxis(Angle, Skill.Force)

			local Rocks = Effects.Rocks:Clone()
			Rocks.CFrame = HumanoidRootPart.CFrame * CFrame.new(x%2 == 0 and X or X / 2, 0, x%2 == 0 and Z or Z / 2)
			Rocks.Parent = workspace.Debris

			local RC = workspace:Raycast(Rocks.CFrame.Position, Rocks.CFrame.UpVector * - 10, RCP)

			if RC then
				if not HumanoidRootPart:FindFirstChild("GroundAtt") then
					GroundAtt.Parent = HumanoidRootPart
				end

				Rocks.Position -= Vector3.new(0, 4, 0)

				Rocks.BrickColor = RC.Instance.BrickColor
				Rocks.Material = RC.Instance.Material

				Rocks.CFrame = CFrame.new(Rocks.Position, HumanoidRootPart.Position)

				local T1 = TS:Create(Rocks, TweenInfo.new(0.1), {
					Position = Rocks.Position + Vector3.new(0, 1, 0),
					Transparency = 0,
					Size = Vector3.new(Random.new():NextNumber(2, 3), Random.new():NextNumber(1.5, 2), Random.new():NextNumber(2, 3))
				})

				T1:Play()

				local Debounce: {boolean} = {}

				for _,v in GroundAtt:GetChildren() do
					if v:IsA("ParticleEmitter") then
						if Debounce[v] == true then return end
						Debounce[v] = true

						v:Emit(v:GetAttribute("EmitCount") / 30 * Skill.Force)
					end
				end

				T1.Completed:Once(function()
					task.delay(LifeTime, function()
						TS:Create(Rocks, TweenInfo.new(0.85), {
							Position = Rocks.Position - Vector3.new(0, 3, 0),
							Transparency = 1,
							Size = Vector3.one
						}):Play()
					end)
				end)

				Debris:AddItem(Rocks, 2)
				Debris:AddItem(GroundAtt, 2)

				if x == Amount then
					Main:FireServer({SkillType = "Smash", Force = Skill.Force, Radius = X * 2})
				end
			else
				Rocks:Destroy()
			end
		end
		Humanoid.AutoRotate = true
		Humanoid.WalkSpeed = 16
		Humanoid.JumpHeight = 7.2
	end
end)

-- Server --

local RPS = game:GetService("ReplicatedStorage")
local Debris = game:GetService("Debris")

local Modules = RPS.Modules
local Meshes = RPS.Meshes
local Remotes = RPS.Remotes

local Debounce = {}

local Ragdoll = require(Modules.Ragdoll)

Remotes.Replicate.OnServerEvent:Connect(function(Player, Skill)
	assert(type(Skill) == "table", "Invalid Argument.")	
	if Debounce[Player.UserId] ~= nil then return end
	Debounce[Player.UserId] = true

	Remotes.Replicate:FireAllClients(Skill)

	task.wait(3)

	table.clear(Debounce)
end)

Remotes.Main.OnServerEvent:Connect(function(Player, Skill)
	local Character = Player.Character or Player.CharacterAdded:Wait()
	local HumanoidRootPart = Character.HumanoidRootPart

	local SmashDamage = 5 * Skill.Force
	
	if Skill.SkillType == "Smash" then
		local SmashBox = Meshes.SmashBox:Clone()
		SmashBox.CanCollide = false
		SmashBox.Position = HumanoidRootPart.Position + Vector3.new(0, - 2, 0)
		SmashBox.Size = Vector3.new(0, Skill.Radius, Skill.Radius)

		local WC = Instance.new("WeldConstraint")
		WC.Part0 = SmashBox
		WC.Part1 = HumanoidRootPart
		WC.Parent = WC.Part0

		SmashBox.Parent = Character

		local Connection Connection = SmashBox.Touched:Connect(function()
			Connection:Disconnect()
		end)

		local Hits: {boolean} = {}

		for _,v: BasePart in SmashBox:GetTouchingParts() do
			if not v:IsDescendantOf(Character) then
				if v.Parent:FindFirstChildWhichIsA("Humanoid") and v.Parent:FindFirstChildWhichIsA("Humanoid").Health > 0 then
					if Hits[v.Parent.Name] == nil then 
						Hits[v.Parent.Name] = true
						
						local Enemy = v.Parent
						local E_Humanoid, E_HRP = Enemy.Humanoid, Enemy.HumanoidRootPart
						
						v.Parent.Humanoid:TakeDamage(SmashDamage)
						
						local BV = Instance.new("BodyVelocity")
						BV.Name = "KnockBack"
						BV.MaxForce = Vector3.one * math.huge
						BV.Velocity = E_HRP.CFrame.UpVector * 20 * Skill.Force + BV.Velocity + E_HRP.CFrame.LookVector * - 10 * Skill.Force 
						
						BV.Parent = E_HRP
						
						Ragdoll:TemporaryRagdoll(v.Parent, 2.5)
						Debris:AddItem(BV, 0.1)
						
						local Stunned = Instance.new("BoolValue", E_HRP.Parent)
						Stunned.Name = "Stunned"
						Debris:AddItem(Stunned, 1 * Skill.Force)
						
						Enemy.ChildAdded:Once(function(Object)
							if Object.Name == "Stunned" then
								E_Humanoid.AutoRotate = false
								E_Humanoid.WalkSpeed = 0
								E_Humanoid.JumpHeight = 0
							end
						end)
						
						Enemy.ChildRemoved:Once(function(Object)
							if Object.Name == "Stunned" then
								E_Humanoid.AutoRotate = true
								E_Humanoid.WalkSpeed = 16
								E_Humanoid.JumpHeight = 7.2
							end
						end)
					end
				end
			end
		end
		SmashBox:Destroy()
		table.clear(Hits)
	end
end)
